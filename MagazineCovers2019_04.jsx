{    /*Copyright 2019 Tomilola AdewaleLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/                 app.beginUndoGroup("Ma Code");                var myCompP = app.project.activeItem;        var selectedLayers = myCompP.selectedLayers;                 //mmm are selected Layers //h are the gridComps // m are the grid Items        var myArray = [];                        for (mmm = 0; mmm < selectedLayers.length; mmm++)        {                var numMarkers = selectedLayers[mmm].property("Marker").numKeys;                for (mmy = 0; mmy < numMarkers - 1; mmy++)                {                        var diff = selectedLayers[mmm].property("Marker").keyTime(                                mmy + 2) - selectedLayers[mmm].property(                                "Marker").keyTime(mmy + 1); //alert(diff);                        myArray.push(diff);                }                myArray.unshift(selectedLayers[mmm].property("Marker").keyTime(                                1)) //alert(myArray);        } //Make an array of times from the marker times        var tomiPreset1 = File("/Users/adewale/Downloads/myTestVertical.ffx");  var tomiPreset2 = File("/Users/adewale/Downloads/myTestHorizontal3.ffx");  var tomiPreset3 = File("/Users/adewale/Downloads/myTestHorizontal3.ffx");          var tomiPresets = [tomiPreset1, tomiPreset2, tomiPreset3]; // put soon-to-be-used presets into an array                                function shuffle(array)        {                var counter = array.length;                var temp = counter;                var index = temp; // While there are elements in the array                while (counter > 0)                { // Pick a random index                        index = Math.floor(generateRandomNumber() *                                counter); // Decrease counter by 1                        counter--; // And swap the last element with it                        temp = array[counter];                        array[counter] = array[index];                        array[index] = temp;                }                return array;        }                        // Find GridItem Comp Position in Main Grid Comp          function getGrid(start, index, numCol, numRow, x, y)                        {                                var columns = numCol;                                var m = index;                                var thestartPosition = [((m) % columns) * x, (                                        Math.floor((m / columns)) *                                        y)] + start;                                return thestartPosition;            } //Make a new comp                        var myOrganizingFolder = app.project.items.addFolder(                "*MyGridItemComps_organizedByGrid"); //creating organizing comp folder        var yourFolderName = prompt(                "Please enter the name of the folder you want to make Comps from");                                                        var timeAccrued = myArray[0]; //begin the time keeping        var tally =0; // begin the tally used not to repeat images so much                                                                                                                                                                                         var myChoice = [];                        for (xu = 0; xu < numInFolder; xu++) //for the number of items in the folder....create an array of choices so we eventually don't reuse the same images                        {                                myChoice[xu] = xu;                        }                        myChoice = shuffle(myChoice);                                                //alert(myChoice.toString());                        //create the shuffled list of the images we'll use                                                                                                                                                                                                                                                                                                                                                                                                                                                    //FOR EACH MARKER/Grid                for (var h = 0; h < myArray.length; h++)                { //for the length of the marker times array to the following...create comps with grids..                var numberOfColums = Math.ceil(generateRandomNumber() * 3);                var numberOfRows = Math.ceil(generateRandomNumber() * 3);                 //defining the randomness range of the columns and rows amount //var numberOfColums= parseInt(prompt("Please enter the number of columns you want")); //var numberOfRows= parseInt(prompt("Please enter the number of rows you want"));                              var folderName = yourFolderName; // name of item you're looking for                var myFolder = null;                                                for (var i = 1; i <= app.project.numItems; i++)                {                        if ((app.project.item(i).name == folderName))                        {                                myFolder = app.project.item(i);                                break;                        }                } //find the asset folder name you define and make it the variable "myFolder"                                         if (myFolder != null)                {                        var numInFolder = myFolder.numItems;                        var compFolder = app.project.items.addFolder("*Grid_" +                                h + "__Comps");                                 //finding the number of assets in that defined folder //creating a comp folder...where the grid comp assets will reside // do stuff with the comp                }                else                {                        alert("Can't find comp '" + folderName + "'");                } //using the nubmer of rows and columns and other comp secs, we make the griditem comps here                                        var ww = numberOfColums;                var hh = numberOfRows;                var compW = parseInt(1920 / ww); // comp width                var compH = parseInt(1080 / hh); // comp height                var compL = 60; // comp length (seconds)                var compRate = 23.976; // comp frame rate                var compBG = [48 / 255, 63 / 255, 84 / 255]; // comp background color                var howManyComps = ww * hh; //var howManyComps=numInFolder; //var howManyComps=48;                                                                                                        //MAKE GRID ITEM COMP...the inner layer sizing and all                for (m = 0; m < howManyComps; m++)                {//alert("My_tally is_"+tally+"_which means it chooses_"+ parseInt(parseInt(myChoice[tally%(numInFolder)])  + 1) );//9if (tally %numInFolder==9){                            myChoice = shuffle(myChoice);                                                      //alert(myChoice.toString());                            }//if we're through all the images, reshuffle them  before u go through                                                var myItemCollection = app.project.items;                        var myComp = myItemCollection.addComp('1', compW, compH,                                1, compL, compRate); //creating new comps of varying sizes and stuff                        myComp.parentFolder = compFolder;                        compFolder.parentFolder = myOrganizingFolder; //place folder in organizing folder //toss them in the right comp folder                        myComp.bgColor = compBG;                        myComp.name = "Grid_" + h + "_" + "GridItem_" + m + "_" +                                yourFolderName; //creating the sole layer for the comp                        var myLayer = myComp.layers.add(myFolder.item(parseInt(parseInt((myChoice[                                        tally%                                (numInFolder)])  + 1)))); //we're choosing through our choices array...so we don't get a repeat images unless we have too many grid items and thus have to repeat the first couple//alert(myChoice[m%numInFolder]  + 1);                      tally++;                                            var x = myLayer.width;                        var y = myLayer.height; //getting the size of the original image asset                        var xx = myComp.width / x                        var yy = myComp.height / y //getting the size of the comp                        if (xx >= yy)                        {                                var s = (xx) * 100;                                var myVal = [s, s];                        }                        else                        {                                s = (yy) * 100;                                var myVal = [s, s];                        } // proper scaling to fit                        myLayer.property("scale").setValue(myVal);                } // setting the write scale on the layer                                                                                                                                                        if (h == 0)                {                        var myMainFolder = app.project.items.addFolder(                                "*AllMyGridComps");                }                else                {                        var myFind = null;                        for (var ii = 1; i <= app.project.numItems; ii++)                        {                                if ((app.project.item(ii).name ==                                        "*AllMyGridComps"))                                {                                        myFind = app.project.item(ii);                                        break;                                }                        }                        var myMainFolder = myFind;                }                                        //making the main comp                                var ncompW = 1920; // comp width                var ncompH = 1080; // comp height                var ncompL = 60; // comp length (seconds)                var ncompRate = 23.976; // comp frame rate                var myMainComp = myItemCollection.addComp('1', ncompW, ncompH,                        1, ncompL, ncompRate);                                                                                 myMainComp.parentFolder = myMainFolder;                myMainComp.name = h + " MyMainGridComp"; //shufflecode                                                                                   for (u = 0; u < howManyComps; u++)                {                        var myLayerinComp = myMainComp.layers.add(compFolder.item(                                parseInt((u % numInFolder)) + 1));                        myLayerinComp.moveToEnd();                        myLayerinComp.applyPreset(tomiPresets[h % tomiPresets.length]);                        myLayerinComp.property("anchorPoint").setValue([0, 0]);                        var mySetPosition = getGrid([0, 0], u, ww, hh, compW,                                compH);                        var myPosition = myLayerinComp.property("position").setValue(                                mySetPosition); //myMainComp.layer(1).copyToComp(intoComp);                } //var myNumLayers = myMainComp.numLayers //var myNumLayers = myMainComp.layers.length; //LayerCollection // PLACE STUFF IN THE COMP WITH THE MUSIC & MARKERS                                                    var layerDelay = .5+Math.floor(howManyComps/5);                var myInPoint = timeAccrued;                timeAccrued += parseFloat(myArray[h + 1]);                var myOutPoint = timeAccrued;                var myLayerinCompP = myCompP.layers.add(myMainFolder.item(parseInt((h %                        numInFolder) + 1)));                myLayerinCompP.moveToEnd();                myLayerinCompP.property("anchorPoint").setValue([0, 0]);                myLayerinCompP.property("position").setValue([0, 0]);                myLayerinCompP.inPoint = layerDelay;                myLayerinCompP.startTime = myInPoint - layerDelay;                                                if (h == myArray.length - 1)                {                        myLayerinCompP.outPoint = myInPoint+1;                } //the very last gridcomp latest fo a second                else                {                        myLayerinCompP.outPoint = myOutPoint;                }        } //end of major  new GridComp loop                    app.endUndoGroup();}